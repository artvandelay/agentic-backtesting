# Generated by NLBT on 2025-10-06 05:36:37.946938
# - Ticker: AAPL
- Period: 2024
- Capital: $10000
- Strategy: Buy and hold AAPL in 2024 with $10000

from backtesting import Backtest, Strategy

data = get_ohlcv_data('AAPL', '2024-01-01', '2024-12-31')

class MyStrategy(Strategy):
    def init(self):
        pass
    
    def next(self):
        if not self.position:
            self.buy()

bt = Backtest(data, MyStrategy, cash=10000)
stats = bt.run()
print(stats)

# Emit structured artifacts for reporting
import json
try:
    # Trades preview table
    import pandas as pd
    print("TRADES_TABLE")
    print(stats._trades.head(20).to_markdown(index=False))
except Exception:
    pass

# Full CSVs for optional charts/tables
try:
    import pandas as pd
    print("TRADES_CSV"); print(stats._trades.to_csv(index=False))
    print("EQUITY_CSV"); print(stats._equity_curve.to_csv(index=False))
except Exception:
    pass

# Compact summary for TL;DR
try:
    end_date = str(stats.get('End', '')) or (str(data.index[-1].date()) if hasattr(data, 'index') and len(data.index) else '')
    equity_final = float(stats.get('Equity Final [$]', 0))
    initial_cap = float(10000)
    pnl_abs = equity_final - initial_cap
    pnl_pct = float(stats.get('Return [%]', 0))
    print("SUMMARY_JSON"); print(json.dumps(dict(
        end=end_date,
        initial=initial_cap,
        equity_final=equity_final,
        portfolio_final=equity_final,
        pnl_abs=pnl_abs,
        pnl_pct=pnl_pct
    )))
except Exception:
    pass